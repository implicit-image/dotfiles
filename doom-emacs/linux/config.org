#+title: Config

* Table of contents :toc:
- [[#meta][Meta]]
- [[#require][Require]]
- [[#custom-variables][Custom Variables]]
- [[#local-functions][Local functions]]
- [[#general-settings][General settings]]
  - [[#font][Font]]
  - [[#global-variables][Global variables]]
  - [[#special-faces][Special faces]]
- [[#package-config][Package config]]
  - [[#gdscript-mode][GDscript mode]]
  - [[#programming-mode-general][Programming Mode (General)]]
  - [[#org-mode][Org mode]]
  - [[#dashboard][Dashboard]]
  - [[#highlight-indent-guides][Highlight indent guides]]
  - [[#dired][Dired]]
  - [[#lsp-mode][LSP Mode]]
  - [[#twittering-mode][Twittering mode]]
  - [[#company][Company]]
  - [[#haskell][Haskell]]
  - [[#rust][Rust]]
  - [[#org-noter][Org noter]]
  - [[#ivy][Ivy]]
  - [[#calibredb][Calibredb]]
- [[#keybindings][Keybindings]]

* Meta

#+begin_src emacs-lisp

(setq user-full-name "Błażej Niewiadomski"
      user-mail-address "blaz.nie@protonmail.com")
#+end_src

* Require
#+begin_src emacs-lisp
(require 'whitespace)
(require 'color)
(require 'org)
(require 'olivetti)
#+end_src

* Custom Variables

#+begin_src emacs-lisp
(defvar my/org-bg-color "#111111" "Color to which change org-block background")
#+end_src

* Local functions
#+begin_src emacs-lisp

#+end_src

* General settings
** Font
#+begin_src emacs-lisp

(setq doom-font (font-spec :family "Iosevka" :size 30)
      doom-variable-pitch-font (font-spec :family "sans" :size 24))

(load-theme 'gruber-darker t)

#+end_src
** Global variables

#+begin_src emacs-lisp
;; TODO move that to use-package declarations
(add-to-list 'org-src-lang-modes (cons "jsx" 'rjsx))

(setq display-line-numbers-type 'relative
      make-backup-files nil
      evil-want-fine-undo t
      auto-save-default t
      doom-modeline-buffer-file-name-style 'buffer-name
      whitespace-style '(face tabs spaces indentation space-mark tab-mark)
      initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))
      ;; indent
      standard-indent 4
      ;;typescript
      typescript-indent-level 4
      ;;web
      web-mode-code-indent-offset 4
      web-mode-markup-indent-offset 4
      ;;C
      c-basic-offset 4
      ;;js
      js2-indent-level 4
      ;; pdf
      +latex-viewers '(pdf-tools))

(add-hook! 'prog-mode-hook #'whitespace-mode)
(add-hook! 'prog-mode-hook #'rainbow-delimiters-mode-enable)
(add-hook! 'gdscript-mode-hook #'lsp)
(add-hook! 'gdscript-mode-hook (set-face-attribute 'whitespace-space nil :background (face-attribute 'default :background)  :foreground "#777777"))
#+end_src

** Special faces
Sets up faces to fix appearance

#+begin_src emacs-lisp
;;TODO: move them to theme
(progn
  (set-face-foreground 'font-lock-comment-face "#8b8b83")
  (set-face-foreground 'font-lock-comment-delimiter-face "#8b8b83")
  (set-face-foreground 'whitespace-space "#777777")
  (set-face-attribute 'org-block nil :background my/org-bg-color :foreground (color-lighten-name (face-attribute 'default :foreground) 30))
  (set-face-attribute 'org-block-begin-line nil
                      :background (color-darken-name (face-attribute 'default :background) 30))
  (set-face-attribute 'org-block-end-line nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 30)))
#+end_src


* Package config

** GDscript mode

By default uses godot4
#+begin_src emacs-lisp

(use-package! gdscript-mode
  :config (setq gdscript-godot-executable "godot4"))
#+end_src


** Programming Mode (General)

#+begin_src emacs-lisp

(use-package! prog-mode
  :init  (set-face-attribute 'whitespace-space nil :background (face-attribute 'default :background)  :foreground "#777777")
  )

#+end_src
** Org mode
#+begin_src emacs-lisp

(use-package! org
  :config
  (progn
    (set-face-attribute 'whitespace-space nil :background my/org-bg-color :foreground "#777777")
   (setq org-hide-emphasis-markers 1
         org-directory "~/org/"
         org-hide-macro-markers 1
         org-confirm-babel-evaluate nil
         org-md-headline-style 'setext
         org-odt-preferred-output-format "doc"
         org-directory "~/org/")
   (org-bullets-mode 1)
   (visual-line-mode 1)
   (whitespace-mode -1)))

#+end_src

** Dashboard

#+begin_src emacs-lisp

(require 'dashboard)
(dashboard-setup-startup-hook)

(use-package! dashboard
  :config
  (setq dashboard-startup-banner 2
        dashboard-set-file-icons t
        dashboard-set-heading-icons t
        dashboard-set-navigator t
        dashboard-items '((recents . 5) (agenda . 5))))
#+end_src

** Highlight indent guides
Not compatible with whitepsace-mod (looks like shit)
#+begin_src emacs-lisp :tangle no

(use-package! highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'bitmap
        highlight-indent-guides-bitmap-function #'highlight-indent-guides--bitmap-line
        highlight-indent-guides-responsive 'stack
        highlight-indent-guides-auto-character-face-perc 200))
#+end_src

** Dired
#+begin_src emacs-lisp

(use-package! dired
  :config
  (setq
   dired-omit-mode 0
   dired-auto-revert-buffer t
   dired-dwim-target t))
#+end_src

** LSP Mode

#+begin_src emacs-lisp

(require 'lsp-mode)
(use-package! lsp-mode
:config (setq lsp-enable-symbol-highlighting t
               lsp-ui-sideline-show-code-actions nil
               lsp-ui-doc-enable t
               lsp-ui-peek-enable t
               lsp-ui-doc-alignment 'frame
               lsp-ui-doc-include-signature t
               lsp-ui-doc-delay 0.1
               lsp-modeline-code-actions-enable t
               lrp-modeline-diagnostics-enable t
               lsp-signature-auto-activate t
               lsp-completion-show-detail t
               lsp-completion-show-kind t
               lsp-lens-enable nil
               ))
#+end_src

** Twittering mode
Currently not working. I think Elon broke some api.

#+begin_src emacs-lisp

(use-package! twittering-mode
  :config (setq twittering-cert-file "/etc/ssl/certs/ca-bundle.crt"
                twittering-connection-type-order '(wget curl urllib-http native urllib-https)))
#+end_src

** Company

#+begin_src emacs-lisp

(use-package! company
  :config
  (setq company-idle-delay nil
        company-selection-wrap-around t
        company-show-quick-access t
        company-tng-mode t
        ))
#+end_src

** Haskell

#+begin_src emacs-lisp

(use-package! lsp-haskell
 :hook haskell-mode-hook)

(use-package! haskell-mode
  :config (setq haskell-doc-use-inf-haskell 1
                haskell-interactive-popup-errors nil))
#+end_src

** Rust

#+begin_src emacs-lisp

(use-package! rustic
  :config (setq rustic-lsp-server 'rust-analyzer
                rustic-lsp-client 'lsp-mode ))
#+end_src

** Org noter
#+begin_src emacs-lisp

(use-package! org-noter
  :config (setq org-noter-notes-window-location 'horizontal-split
                org-noter-always-create-frame nil
                org-noter-notes-search-path '("~/org/booknotes/")
                org-noter-default-heading-title "PAGE $p$"))
#+end_src

** Ivy

#+begin_src emacs-lisp

(use-package! ivy
  :config (setq ivy-height 10))
#+end_src

** Calibredb

#+begin_src emacs-lisp

(setq calibredb-root-dir "~/Library"
      calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)
      calibredb-library-alist '(("~/Library")))
#+end_src



* Keybindings

#+begin_src emacs-lisp

(map! :leader
      (:prefix ("a" . "applications")
       (:desc "Open calibredb" "c" #'calibredb
        :desc "Counsel Web Colors" "C" #'counsel-colors-web))
      (:prefix ("t" . "toggle")
       :desc "Visual line mode" "v" #'visual-line-mode)
      (:prefix ("t" . "toggle")
       :desc "Modeline" "M" #'global-hide-mode-line-mode))
#+end_src
