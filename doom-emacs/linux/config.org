# +TITLE: Config
# $DOOMDIR/config.el -*- lexical-binding: t; -*-

# Place your private configuration here! Remember, you do not need to run 'doom
# sync' after modifying this file!

* :toc:
  - [[#name-and-email][Name and email]]
  - [[#fonts][Fonts]]
  - [[#themes][Themes]]
  - [[#org-mode][Org mode]]
  - [[#general-editor-settings][General editor settings]]
  - [[#my-packages][My Packages]]
  - [[#global-keybindings][Global keybindings]]

** Name and email
# Some functionality uses this to identify you, e.g. GPG configuration, email
# clients, file templates and snippets.
#+begin_src elisp
(setq user-full-name "Błażej Niewiadomski"
      user-mail-address "blaz.nie@protonmail.com")
#+end_src



** Fonts
# Doom exposes five (optional) variables for controlling fonts in Doom. Here
# are the three important ones:
#
# + `doom-font'
# + `doom-variable-pitch-font'
# + `doom-big-font' -- used for `doom-big-font-mode'; use this for
#   presentations or streaming.
# They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
# font string. You generally only need these two:
#+begin_src elisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 20)
      doom-variable-pitch-font (font-spec :family "sans" :size 16))
;; Jetbrains Mono



#+end_src

** Themes
# There are two ways to load a theme. Both assume the theme is installed and
# available. You can either set `doom-theme' or manually load a theme with the
# `load-theme' function. This is the default:
#+begin_src elisp
(require 'whitespace)
(load-theme 'gruber-darker t)
; doom-old-hope
; doom-sourcerer
; doom-tomorrow-night
; monokai-classic
; monokai-spectrum
; doom-nova
; gruber-darker
(set-face-foreground 'font-lock-comment-face "#8b8b83")
(set-face-foreground 'font-lock-comment-delimiter-face "#8b8b83")
(set-face-attribute 'whitespace-space nil :background nil :foreground "#777777")
;; (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
;;  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
;; (setq fancy-splash-image "~/.doom.d/blackhole.png")

#+end_src

#+RESULTS:

** Org mode
# If you use `org' and don't want your org files in the default location below,
# change `org-directory'. It must be set before org loads!
#+begin_src elisp
(setq org-directory "~/org/")

(after! org-mode
  (lambda () (org-bullets-mode 1))
  (visual-line-mode)
  (emojify-mode))

(require 'color)
(require 'org)

(setq org-hide-emphasis-markers 1
      org-hide-macro-markers 1)


(set-face-attribute 'org-block nil :background
                   (color-darken-name
                    (face-attribute 'default :background) 6))
(set-face-attribute 'org-block-begin-line nil :background
                   (color-darken-name
                    (face-attribute 'default :background) 4))
(set-face-attribute 'org-block-end-line nil :background
                   (color-darken-name
                    (face-attribute 'default :background) 4))
(set-face-attribute 'org-block nil :foreground
                   (color-lighten-name
                    (face-attribute 'default :foreground) 2))

#+end_src
** General editor settings
#+begin_src elisp

(setq display-line-numbers-type 'relative
      make-backup-files nil
      evil-want-fine-undo t
      auto-save-default t
      doom-modeline-buffer-file-name-style 'buffer-name
      whitespace-style '(face tabs spaces indentation space-mark tab-mark))

(defun org-setup ()
  (interactive)
  (whitespace-mode -1))

(add-hook! 'prog-mode-hook #'whitespace-mode)
(add-hook! 'prog-mode-hook #'rainbow-delimiters-mode-enable)
(add-hook! 'org-mode-hook #'org-setup)
;; (display-time-mode 1)
;; (display-battery-mode 1)
;; (mini-modeline-mode)
;; (setq sml/theme 'dark)

#+end_src


** My Packages
#
# - `load!' for loading external *.el files relative to this one
# - `use-package!' for configuring packages
# - `after!' for running code after a package has loaded
# - `add-load-path!' for adding directories to the `load-path', relative to
#   this file. Emacs searches the `load-path' when you load packages with
#   `require' or `use-package'.
#    `map!' for binding new keys
#
# To get information about any of these functions/macros, move the cursor over
# the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
# This will open documentation for it, including demos of how they are used.
#
# You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
# they are implemented.
*** company
#+begin_src elisp



#+end_src
*** lsp-mode
IDE configuration
#+begin_src elisp
(require 'lsp-mode)
(use-package! lsp-mode
  :config (setq lsp-enable-symbol-highlighting 1
                lsp-ui-doc-enable 1
                lsp-lens-enable 1
                lsp-ui-sideline-enable nil
                lsp-modeline-code-actions-enable 1
                lsp-modeline-diagnostics-enable 1
                lsp-signature-auto-activate 1
                lsp-signature-render-documentation 1
                lsp-completion-show-detail 1
                lsp-completion-show-kind 1))

#+end_src
*** TODO sort rest of config
#+begin_src elisp

;;org-mode
(setq org-odt-preffered-output-format "doc")
(setq org-directory "~/org/")


(after! org
  (+word-wrap-mode 1)
  (use-package! ox-extra
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines))))

(after! company
  (setq company-idle-delay nil
        company-selection-wrap-around t
        company-show-numbers t))

(after! org
  (use-package! ox-latex
    :init
    :config
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))
    (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
    (setq org-latex-prefer-user-labels t)

    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist")))

    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil))))
(add-to-list 'auto-mode-alist
             '("\\.epub\\'" . nov-mode)
             '("\\.rasi\\'" . css-mode))
             ;; '("\\.html\\'" . web-mode))


#+end_src
*** haskell
#+begin_src elisp

(use-package! haskell-mode
  :config (setq haskell-doc-use-inf-haskell 1
                haskell-interactive-popup-errors nil))
#+end_src
*** dashboard with kisses.el
*** typescript
#+begin_src elisp
(setq typescript-indent-level 2
      web-mode-code-indent-offset 2
      web-mode-markup-indent-offset 2
      standard-indent 2)
#+end_src
*** calibredb
#+begin_src elisp
(setq calibredb-root-dir "~/Library"
      calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)
      calibredb-library-alist '(("~/Library")))
#+end_src
*** js2-mode
#+begin_src elisp
(setq js2-indent-level 2)
#+end_src
*** org-mode
#+begin_src elisp

;; (after! org
;;   (map! :leader
;;         (:prefix "m"
;;          :desc "Execute current source block" "E" #'org-babel-execute-src-block)))


#+end_src
*** pdfview
#+begin_src elisp
(setq +latex-viewers '(pdf-tools))
#+end_src
** Global keybindings
#+begin_src elisp
(map! :leader
     (:prefix ("a" . "applications")
      (:prefix ("c" . "calibre")
       :desc "Open calibredb" "c" #'calibredb)))

(map! :leader
     (:prefix ("t" . "toggle")
       :desc "Visual line mode" "v" #'visual-line-mode))

(map! :leader
     (:prefix ("t" . "toggle")
       :desc "Modeline" "M" #'global-hide-mode-line-mode))

#+end_src
