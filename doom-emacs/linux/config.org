# +TITLE: Config
# $DOOMDIR/config.el -*- lexical-binding: t; -*-

# Place your private configuration here! Remember, you do not need to run 'doom
# sync' after modifying this file!

* :toc:
  - [[#name-and-email][Name and email]]
  - [[#fonts][Fonts]]
  - [[#themes][Themes]]
  - [[#org-mode][Org mode]]
  - [[#general-editor-settings][General editor settings]]
  - [[#my-packages][My Packages]]
  - [[#global-keybindings][Global keybindings]]
  - [[#blog][Blog]]

** Name and email
# Some functionality uses this to identify you, e.g. GPG configuration, email
# clients, file templates and snippets.
#+begin_src elisp
(setq user-full-name "Błażej Niewiadomski"
      user-mail-address "blaz.nie@protonmail.com")
#+end_src



** Fonts
# Doom exposes five (optional) variables for controlling fonts in Doom. Here
# are the three important ones:
#
# + `doom-font'
# + `doom-variable-pitch-font'
# + `doom-big-font' -- used for `doom-big-font-mode'; use this for
#   presentations or streaming.
# They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
# font string. You generally only need these two:
#+begin_src elisp
(setq doom-font (font-spec :family "CaskaydiaCove NFM" :size 28)
      doom-variable-pitch-font (font-spec :family "sans" :size 24))
;; Jetbrains Mono



#+end_src

** Themes
# There are two ways to load a theme. Both assume the theme is installed and
# available. You can either set `doom-theme' or manually load a theme with the
# `load-theme' function. This is the default:
#+begin_src elisp
(require 'whitespace)
(load-theme 'gruber-darker t)


#+end_src

#+RESULTS:

** Org mode
# If you use `org' and don't want your org files in the default location below,
# change `org-directory'. It must be set before org loads!
#+begin_src elisp


(require 'color)
(require 'org)






(after! org
  (lambda () (org-bullets-mode 1))
  (visual-line-mode)
  (whitespace-mode -1)
  (set-face-attribute 'whitespace-space nil :background nil :foreground "#777777")
  (set-face-attribute 'org-block nil :background "#181818")
  (set-face-attribute 'org-block-begin-line nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 2))
  (set-face-attribute 'org-block-end-line nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 2))
  (set-face-attribute 'org-block nil :foreground
                      (color-lighten-name
                       (face-attribute 'default :foreground) 2))
  (map! :desc "Evaluate babel source block" :niv "C-c C-s" #'org-babel-execute-src-block:async)
  ;; (map! :leader
  ;;       (:prefix "m"
  ;;        :desc "Execute current source block" "x" #'org-babel-execute-src-block:async))
  (map! :leader
        (:prefix "m"
         :desc "Render LaTeX blocks" "R" #'org-latex-preview)))

(setq
 org-hide-emphasis-markers 1
 org-directory "~/org/"
 org-hide-macro-markers 1
 org-confirm-babel-evaluate nil
 org-md-headline-style 'setext)


#+end_src

#+RESULTS:

** General editor settings
#+begin_src elisp

(require 'dashboard)
(dashboard-setup-startup-hook)

(use-package! dashboard
  :config
  (setq
   dashboard-startup-banner 2
   dashboard-set-file-icons t
   dashboard-set-heading-icons t
   dashboard-set-navigator t))


(setq display-line-numbers-type 'relative
      make-backup-files nil
      evil-want-fine-undo t
      auto-save-default t
      doom-modeline-buffer-file-name-style 'buffer-name
      whitespace-style '(face tabs spaces indentation space-mark tab-mark)
      initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))
      )

;; (defun org-setup ()
;;   (interactive)
;;   (whitespace-mode -1))

(add-hook! 'prog-mode-hook #'whitespace-mode)
(add-hook! 'prog-mode-hook #'rainbow-delimiters-mode-enable)
;; (add-hook! 'org-mode-hook #'org-setup)
;; (display-time-mode 1)
;; (display-battery-mode 1)
;; (mini-modeline-mode)
;; (setq sml/theme 'dark)




#+end_src


** My Packages
#
# - `load!' for loading external *.el files relative to this one
# - `use-package!' for configuring packages
# - `after!' for running code after a package has loaded
# - `add-load-path!' for adding directories to the `load-path', relative to
#   this file. Emacs searches the `load-path' when you load packages with
#   `require' or `use-package'.
#    `map!' for binding new keys
#
# To get information about any of these functions/macros, move the cursor over
# the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
# This will open documentation for it, including demos of how they are used.
#
# You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
# they are implemented.
*** dired
#+begin_src elisp
(use-package! dired :config (setq dired-omit-mode 0))
#+end_src
*** lsp-mode
IDE configuration
#+begin_src elisp
(require 'lsp-mode)
(use-package! lsp-mode
  :config (setq lsp-enable-symbol-highlighting 1
                lsp-ui-doc-enable 1
                lsp-lens-enable 1
                lsp-ui-sideline-enable nil
                lsp-modeline-code-actions-enable 1
                lsp-modeline-diagnostics-enable 1
                lsp-signature-auto-activate 1
                lsp-signature-render-documentation 1
                lsp-completion-show-detail 1
                lsp-completion-show-kind 1
                ;;pyright
                lsp-pyright-diagnostic-mode "workspace"))






#+end_src
*** TODO sort rest of config
#+begin_src elisp

;;org-mode
(setq org-odt-preffered-output-format "doc")
(setq org-directory "~/org/")


(after! org
  (+word-wrap-mode 1)
  (use-package! ox-extra
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines))))

(after! company
  (setq company-idle-delay nil
        company-selection-wrap-around t
        company-show-numbers t))

(after! org
  (use-package! ox-latex
    :init
    :config
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))
    (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
    (setq org-latex-prefer-user-labels t)

    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist")))

    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil))))

(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
(add-to-list 'auto-mode-alist '("\\.rasi\\'" . css-mode))
(add-to-list 'auto-mode-alist '("\\.nss\\'" . c-mode))


#+end_src
*** haskell
#+begin_src elisp

(use-package! haskell-mode
  :config (setq haskell-doc-use-inf-haskell 1
                haskell-interactive-popup-errors nil))
#+end_src
*** rust
#+begin_src elisp
(after! rustic
  (setq rustic-lsp-server 'rust-analyzer))

#+end_src
*** typescript
#+begin_src elisp
(setq typescript-indent-level 2
      web-mode-code-indent-offset 2
      web-mode-markup-indent-offset 2
      standard-indent 2)
#+end_src
*** C
#+begin_src elisp
(setq c-basic-offset 2)

#+end_src
*** calibredb
#+begin_src elisp
(setq calibredb-root-dir "~/Library"
      calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)
      calibredb-library-alist '(("~/Library")))
#+end_src
*** js2-mode
#+begin_src elisp
(setq js2-indent-level 2)
#+end_src
*** pdfview
#+begin_src elisp
(setq +latex-viewers '(pdf-tools))
#+end_src

** Global keybindings
#+begin_src elisp
(map! :leader
     (:prefix ("a" . "applications")
       :desc "Open calibredb" "c" #'calibredb))

(map! :leader
     (:prefix ("t" . "toggle")
       :desc "Visual line mode" "v" #'visual-line-mode))

(map! :leader
     (:prefix ("t" . "toggle")
       :desc "Modeline" "M" #'global-hide-mode-line-mode))

#+end_src
** Blog



#+begin_src elisp :tangle no
(require 'ox-publish)
(setq org-publish-project-alist
      `(("pages"
         :base-directory "~/org/blog/"
         :base-extension "org"
         :recursive t
         :publishing-directory "~/programming/implicit-image.github.io/blog/html/"
         :publishing-function org-html-publish-to-html
         :html-doctype "html5"
         :html-html5-fancy t
         :html-head-include-scripts nil
         :html-head-include-default-style nilo
         :html-head "<link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\"/>"
         :auto-sitemap t
         :sitemap-filename sitemap.org)

        ("static"
         :base-directory "~/org/blog/"
         :base-extension "css\\|txt\\|jpg\\|gif\\|png"
         :recursive t
         :publishing-directory  "~/programming/implicit-image.github.io/blog/html/"
         :publishing-function org-publish-attachment)

        ("implicit-image.github.io" :components ("pages" "static"))))



#+end_src
