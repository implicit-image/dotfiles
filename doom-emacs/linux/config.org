#+title: Config
#+PROPERTY: header-args :results none

* Table of contents :toc:
- [[#meta][Meta]]
- [[#require][Require]]
- [[#general-settings][General settings]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#popups][Popups]]
  - [[#highlighting-indent][Highlighting indent]]
  - [[#global-variables][Global variables]]
  - [[#file-associations][File associations]]
- [[#package-config][Package config]]
  - [[#calendar-sync][Calendar sync]]
  - [[#2da-support][2da support]]
  - [[#image-mode][Image mode]]
  - [[#gdscript-mode][GDscript mode]]
  - [[#magit][Magit]]
  - [[#jupyter][Jupyter]]
  - [[#copilot][Copilot]]
  - [[#ellama][Ellama]]
  - [[#programming-mode-general][Programming Mode (General)]]
  - [[#org-roam][Org Roam]]
  - [[#org-mode][Org mode]]
  - [[#treemacs][Treemacs]]
  - [[#telephone-line-modeline][Telephone line (modeline)]]
  - [[#dired][Dired]]
  - [[#emms][EMMS]]
  - [[#ibuffer][ibuffer]]
  - [[#lsp-mode][LSP Mode]]
  - [[#lsp-treemacs][LSP Treemacs]]
  - [[#twittering-mode][Twittering mode]]
  - [[#completion][Completion]]
  - [[#nwscript][NWScript]]
  - [[#haskell][Haskell]]
  - [[#typescript][Typescript]]
  - [[#c3][C3]]
  - [[#rust][Rust]]
  - [[#org-noter][Org noter]]
  - [[#ivy][Ivy]]
  - [[#blamer][Blamer]]
  - [[#calibredb][Calibredb]]
  - [[#ligatures][Ligatures]]
- [[#website][Website]]
- [[#global-keybindings][Global Keybindings]]

* Meta
#+begin_src emacs-lisp

(setq user-full-name "Błażej Niewiadomski"
      user-mail-address "blaz.nie@protonmail.com")
#+end_src


* Require
#+begin_src emacs-lisp
(require 'whitespace)
(require 'color)
(require 'org)
#+end_src


* General settings
** Font
#+begin_src emacs-lisp
(let ((cascadia
       (font-spec :family "Cascadia Mono NF"
                  :weight 'semi-light
                  :size 28))
      (iosevka
       (font-spec :family "Iosevka Nerd Font Mono"
                  :weight 'light
                  :size 30))
      (fantasque
       (font-spec :family "FantasqueSansM Nerd Font Mono"
                  :weight 'light
                  :size 30)))
  (setq doom-font cascadia
        doom-symbol-font cascadia
        doom-emoji-font cascadia
        doom-variable-pitch-font (font-spec :family "sans"
                                            :size 28)))
#+end_src

** Theme
#+begin_src emacs-lisp
(require 'f)

(add-to-list 'custom-theme-load-path (substitute-in-file-name "$HOME/projects/doom-gruber-darker-theme"))
;; (add-to-list 'custom-theme-load-path (substitute-in-file-name "$HOME/.emacs.doom.d/.local/straight/repos/doom-gruber-darker-theme"))
(load-theme 'doom-gruber-darker t)


#+End_src

** Popups

#+begin_src emacs-lisp
(set-popup-rules!
  '(("^\\*\\(Man\\|Woman\\)" :size #'popup-display-buffer-fullframe-fn)
    ("^\\*\\(vc-diff\\|vc-dir\\)" :size #'popup-display-buffer-fullframe-fn)))

#+end_src

** Highlighting indent

#+begin_src emacs-lisp :tangle yes
;; (use-package! highlight-indentation
;;   :disabled
;;   :init (setq highlight-indentation-blank-lines t)
;;   :hook (prog-mode . highlight-indentation-mode))

(use-package! whitespace
  :init
  (setq whitespace-display-mappings '((space-mark 32
                                                 [183]
                                                 [46])
                                     (space-mark 160
                                                 [164]
                                                 [95])
                                     (newline-mark 10
                                                   [36 10])
                                     (tab-mark 9
                                               [187 9]
                                               [92 9]))
        whitespace-style '(face tabs spaces indentation space-mark tab-mark))
  :hook (prog-mode . whitespace-mode))

(use-package! indent-bars
  :disabled
  :config
  (setq indent-bars-color '(highlight :face-bg t :blend 0.15)
        indent-bars-starting-column 0
        indent-bars-pattern "."
        indent-bars-width-frac 0.1
        indent-bars-pad-frac 0.1
        indent-bars-zigzag nil
        indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1) ; blend=1: blend with BG only
        indent-bars-highlight-current-depth '(:blend 0.5) ; pump up the BG blend on current
        indent-bars-display-on-blank-lines t)
  :custom
  (indent-bars-prefer-character t)
  :hook (prog-mode . indent-bars-mode))
#+end_src


** Global variables

#+begin_src emacs-lisp
;; TODO: move that to use-package declarations

(require 'recentf)
(add-to-list 'recentf-exclude "\\/home/b/.priv/\\'")
(add-to-list 'recentf-exclude "\\/home/b/.priv/pictures/\\")
(add-to-list 'recentf-exclude "\\/home/b/Pictures/p/\\")
(add-to-list 'recentf-exclude "\\~/.priv/pictures/\\")
(add-to-list 'recentf-exclude "\\~/.priv/pictures/\\")

(setq display-line-numbers-type 'relative
      window-divider-default-places t
      make-backup-files nil
      evil-want-fine-undo t
      auto-save-default t
      doom-modeline-buffer-file-name-style 'file-name-with-project
      ;; indent
      standard-indent 4
      ;;typescript
      typescript-indent-level 4
      ;;web
      web-mode-code-indent-offset 4
      web-mode-markup-indent-offset 4
      ;;C
      c-basic-offset 4
      ;;js
      js2-indent-level 4
      ;; pdf
      +latex-viewers '(pdf-tools)
      ;; file size limit
      large-file-warning-threshold 20000000)
#+end_src

** File associations

#+begin_src emacs-lisp
(require 'yuck-mode)
(add-to-list 'auto-mode-alist '("\\.rasi\\'" . jsonc-mode))
(add-to-list 'auto-mode-alist '("\\.yuck\\'" . yuck-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'" . jsonc-mode))
(add-to-list 'auto-mode-alist '("\\.scar\\'" . lua-mode))
#+end_src

* Package config

** Calendar sync

#+begin_src emacs-lisp


#+end_src

** 2da support
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.2da\\'" . (lambda ()
                                                  (interactive)
                                                  (csv-mode)
                                                  (csv-set-separator " "))))
#+end_src




** Image mode

#+begin_src emacs-lisp
(use-package! image-mode
  :defer t
  :config (setq image-auto-resize 'fit-window
                image-use-external-converter t))

#+end_src


** GDscript mode

By default uses godot4.
#+begin_src emacs-lisp

(use-package! gdscript-mode
  :defer t
  :config (setq gdscript-godot-executable "godot"))

#+end_src


** Magit

#+begin_src emacs-lisp
;; (use-package! magit
;;   :config (setq magit-key))
#+end_src

** Jupyter
*** Main mode
#+begin_src emacs-lisp
(use-package! jupyter)
#+end_src

*** Haskell support

#+begin_src emacs-lisp

#+end_src
** Copilot

#+begin_src emacs-lisp
(require 'copilot)
(use-package! copilot
  :defer t
  :config
  (setq copilot-network-proxy '(:host "127.0.0.1" :port 11437 :rejectUnauthorized :json-false))
  :bind (:map copilot-completion-map
              ("<tab>" . #'copilot-accept-completion)
              ("C-<tab>" . #'copilot-accept-completion-by-word)))


#+end_src

** Ellama

#+begin_src emacs-lisp

(use-package! ellama
  :defer t
  :init
  (setopt ellama-keymap-prefix "C-c m")
  (setopt ellama-language "English")
  (require 'llm-ollama)
  (setopt ellama-provider
          (make-llm-ollama
           :chat-model "codellama:code"
           :embedding-model "nomic-embed-text")))


#+end_src

** Programming Mode (General)

#+begin_src emacs-lisp

(add-hook! 'prog-mode-hook #'rainbow-delimiters-mode-enable)

#+end_src

** Org Roam
#+begin_src emacs-lisp
(use-package! org-roam
  ;;:defer t
  :custom
  (org-roam-directory (substitute-in-file-name "$HOME/org/roam"))
  (org-roam-dailies-directory "daily")
  (org-roam-dailies-capture-templates '(("d" "default" entry
                                         "* %?"
                                         :target (file+head "%<%Y-%m-%d>.org"
                                                            "#+title: %Y=%m-%d\n"))))
  :config
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol)
  (require 'org-roam-export)
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:20}" 'face 'org-tag))
        org-roam-db-node-include-function
        (lambda ()
          (not (member "ATTACH" (org-get-tags))))
        org-roam-db-update-on-save t
        org-roam-completion-everywhere t))



#+end_src

** Org mode
#+begin_src emacs-lisp

(defun my/setup-org ()
  "Setup org mode"
  (set-face-background 'whitespace-space my/org-bg-color))

(require 'org)
(use-package! org
  :config
  (add-to-list 'org-src-lang-modes (cons "jsx" 'rjsx))
  (add-to-list 'org-src-lang-modes (cons "nwscript" 'nwscript-mode))
  (plist-put org-format-latex-options :background "#181818")
  (plist-put org-format-latex-options :foreground "#f1f1f1")
  (plist-put org-format-latex-options :scale 3.0)
  (setq org-hide-emphasis-markers 1
        org-directory "~/org/"
        org-hide-macro-markers 1
        org-latex-packages-alist '(("" "color" t)
                                   ("" "tikz" t))
        org-latex-compiler "pdflatex"
        org-confirm-babel-evaluate nil
        org-md-headline-style 'setext
        org-odt-preferred-output-format "doc"
        ;; agenda
        org-agenda-breadcrumbs-separator ">"
        org-agenda-start-with-log-mode t
        org-log-done 'time
        org-log-into-drawer t
        org-agenda-files '("~/org/agenda/agenda.org"
                           "~/org/agenda/birthdays.org"
                           "~/org/agenda/habits.org"))
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
        '(("archive.org" :maxlevel . 1)
         ("tasks.org" :maxlevel . 1)))

  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
        '((:startgroup)
        ; Put mutually exclusive tags here
          (:endgroup)
          ("@errand" . ?E)
          ("@home" . ?H)
          ("@work" . ?W)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("publish" . ?P)
          ("batch" . ?b)
          ("note" . ?n)
          ("idea" . ?i)))
  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/org/agenda/tasks.org" "TODOS")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/org/journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
          ("jm" "Meeting" entry
           (file+olp+datetree "~/org/journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

          ("w" "Workflows")
          ("we" "Checking Email" entry (file+olp+datetree "~/org/ournal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline "~/org/metrics.org" "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  :init (progn (org-bullets-mode 1)
               (visual-line-mode 1)
               (whitespace-mode -1)))

(defun org-babel-edit-prep:C (babel-info)
  "Setup for lsp mode in org src edit buffers."
  (setq-local default-directory (->> babel-info caddr (alist-get :dir)))
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
  (lsp!))


#+end_src

*** Org Babel

#+begin_src emacs-lisp

(require 'ob-zig)

#+end_src


** Treemacs

#+begin_src emacs-lisp

(use-package! treemacs
  :defer t
  :commands (treemacs-indent-guide-mode)
  :config (setq treemacs-indent-guide-style 'line
                treemacs-project-follow-mode t)
  :init (treemacs-indent-guide-mode 1))

#+end_src

** Telephone line (modeline)

#+begin_src emacs-lisp

#+end_src

** Dired

#+begin_src emacs-lisp

(use-package! dired
  :init
  (autoload 'dired-async-mode "dired-async.el" nil t)
  (dired-async-mode 1)
  :config (setq dired-omit-mode 0
                dired-auto-revert-buffer t
                dired-dwim-target t))
#+end_src

** EMMS
#+begin_src emacs-lisp :tangle no
(require 'emms-player-simple)
(require 'emms-source-file)
(require 'emms-source-playlist)

(use-package! emms
  :defer t
  :init (setq emms-player-list '(emms-player-mpv)
              emms-info-functions '(emms-info-native)
              emms-info-asynchronously t
              emms-playlist-buffer-name "*Playlist*"
              emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find
              )
  :config
  :bind)


#+end_src

** ibuffer

#+begin_src emacs-lisp
(use-package! ibuffer
  :defer t)
#+end_src




** LSP Mode

#+begin_src emacs-lisp



(require 'lsp-mode)
(use-package! lsp-mode
  :defer t
  :config
  (setq lsp-enable-symbol-highlighting t
        lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-show-diagnostics nil
        lsp-ui-doc-enable t
        lsp-ui-peek-enable t
        lsp-ui-doc-alignment 'frame
        lsp-ui-doc-include-signature t
        lsp-ui-doc-show-with-cursor t
        lsp-ui-doc-position 'top
        lsp-ui-doc-delay 0.0
        lsp-modeline-code-actions-enable t
        lsp-modeline-diagnostics-enable t
        lsp-signature-auto-activate t
        lsp-signature-render-documentation nil
        lsp-completion-show-detail t
        lsp-completion-show-kind t
        lsp-headerline-breadcrumb-enable t
        lsp-headerline-breadcrumb-enable-diagnostics t
        lsp-headerline-breadcrumb-segments '(project path-up-to-project file symbols)
        lsp-headerline-breadcrumb-icons-enable t
        lsp-lens-enable nil)
  :hook (nwscript-mode . lsp-mode)
        (gdscript-mode . lsp-mode))

#+end_src

** LSP Treemacs

#+begin_src emacs-lisp :tangle no
(use-package! lsp-treemacs
  :init (setq lsp-treemacs-)
  :config
  :bind
  :hook)


#+end_src


** Twittering mode
Currently not working. I think Elon broke some api.

#+begin_src emacs-lisp

(use-package! twittering-mode
  :defer t
  :config (setq twittering-cert-file "/etc/ssl/certs/ca-bundle.crt"
                twittering-connection-type-order '(wget curl urllib-http native urllib-https)))
#+end_src

** Completion
*** Company
ATM trying corfu.
#+begin_src emacs-lisp :tangle yes

(use-package! company
  :defer t
  :config (setq company-idle-delay -1
                company-selection-wrap-around t
                company-show-quick-access nil
                ;; quickhelp
                company-quickhelp-max-lines 8
                company-quickhelp-delay nil
                company-quickhelp-x-offset 40
                company-format-margin-function 'company-text-icons-margin
                company-text-icons-add-background t
                ;; tooltips
                company-tooltip-flip-when-above t
                company-tooltip-align-annotations t
                company-tooltip-width-grow-only t
                company-tooltip-maximum-width 200
                ;; dabbrev
                company-dabbrev-other-buffers t
                company-dabbrev-code-everywhere t)
  :bind (:map company-active-map
              ("C-d" . #'company-quickhelp-manual-begin)))

(use-package! company-box
  :config
  (setq company-idle-delay nil
        company-box-frame-behavior 'point
        company-box-frame-parameters  '((left . -1)
                                        (no-accept-focus . t)
                                        (no-focus-on-map . t)
                                        (min-width  . 0)
                                        (width  . 0)
                                        (min-height  . 0)
                                        (height  . 0)
                                        (internal-border-width . 1)
                                        (horizontal-scroll-bars . nil)
                                        (left-fringe . 0)
                                        (right-fringe . 0)
                                        (menu-bar-lines . 0)
                                        (tool-bar-lines . 0)
                                        (line-spacing . 0)
                                        ;; (unsplittable . nil)
                                        (undecorated . t)
                                        (top . -1)
                                        (visibility . nil)
                                        (mouse-wheel-frame . nil)
                                        (no-other-frame . t)
                                        (cursor-type . nil)
                                        (drag-internal-border . t)
                                        (left-fringe . 0)
                                        (right-fringe . 0)
                                        (tab-bar-lines . 0)
                                        (no-special-glyphs . t))
        company-box-scrollbar nil
        company-box-doc-enable t
        company-box-doc-frame-parameters '((min-width . 0)
                                           (min-height . 0)
                                           (internal-border-width . 10)
                                           (border-color . "#f1f1f1")
                                           (border-width . 10)))
  :hook (company-mode . company-box-mode))


#+end_src
*** Corfu

#+begin_src emacs-lisp tangle: no
(use-package! corfu
  :custom
  (corfu-cycle t)
  (corfu-preselect 'first)
  (corfu-auto-prefix 40)
  (corfu-auto nil)
  :config
  (global-corfu-mode 1)
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)
        :map prog-mode-map
        ("C-SPC" . completion-at-point))
  :hook (prog-mode . corfu-mode))

(use-package! corfu-popupinfo
  :after corfu
  :bind
  (:map corfu-map
        ("C-h" . corfu-popupinfo-toggle)))

(use-package! corfu-doc-terminal
  :hook (corfu-terminal-mode . corfu-doc-terminal-mode))

(use-package! corfu-terminal
  :hook (corfu-mode . (lambda () (unless (display-graphic-p) (corfu-terminal-mode 1)))))
#+end_src


** NWScript

*** LSP-NWScript

#+begin_src emacs-lisp
(require 'lsp-mode)


(use-package! lsp-nwscript
  ;; for testing
  :load-path "/home/b/projects/lsp-nwscript.el"
  :init
  (add-to-list 'lsp-language-id-configuration '(nwscript-mode . "nwscript"))
  :config
  (setq lsp-log-io t)
  (setq lsp-nwscript-node-local-includes-alist
        '(("/home/b/projects/nwn2mods/progression-overhaul"
           ("./include/ps_include/"
             "./include/jx_framework/jx/"
             "./include/jx_framework/2d2f/"
             "./include/jx_framework/cmi/"
             "./include/jx_framework/misc/"
             "./include/jx_framework/tob/"
             "./include/jx_framework/interfaces"))
          ("/home/b/projects/nwn2mods/jx-framework-extended"
           ("./jx/"
            "./2d2f/"
            "./cmi/"
            "./misc/"
            "./interfaces/"
            "./tob/")))
        lsp-nwscript-server-type "node"
        lsp-nwscript-node-extra-server-settings
        '(("nwscript-ee-lsp.compiler.nwn2BaseIncludes"
           ("/home/b/projects/mods/src/sources/Scripts_X2/"
            "/home/b/projects/mods/src/sources/Scripts_X1/"
            "/home/b/projects/mods/src/sources/Scripts/") t))
        lsp-nwscript-node-server-path (substitute-env-vars "$HOME/projects/nwscript-ee-language-server/server/out/server.js")
        lsp-nwscript-node-hover-function-comments t
        lsp-nwscript-node-format-enabled nil
        lsp-nwscript-node-complete-function-params t
        lsp-nwscript-node-compiler-os "Linux"
        lsp-nwscript-node-compiler-report-warnings t
        lsp-nwscript-node-compiler-verbose t
        lsp-nwscript-node-compiler-enabled t))

#+end_src

*** NWScript mode

#+begin_src emacs-lisp
(use-package! nwscript-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.nss\\'" . nwscript-mode))
  (add-to-list 'auto-mode-alist '("\\.NSS\\'" . nwscript-mode))
  :init
  ;; set company backends
  ;; TODO: make it doom-agnostic
  (set-company-backend! 'nwscript-mode 'company-dabbrev-code 'company-yasnippet))

#+end_src

** Haskell

#+begin_src emacs-lisp

(use-package! lsp-haskell
 :hook haskell-mode-hook)

(use-package! haskell-mode
  :config (setq haskell-doc-use-inf-haskell 1
                haskell-interactive-popup-errors nil))
#+end_src

** Typescript

#+begin_src emacs-lisp
(setq lsp-clients-typescript-prefer-use-project-ts-server t
      lsp-typescript-suggest-complete-function-calls t
      lsp-typescript-update-imports-on-file-move-enabled t)

#+end_src


** C3
#+begin_src emacs-lisp :tangle no
(use-package! c3-ts-mode)
#+end_src


** Rust

#+begin_src emacs-lisp

(use-package! rustic
  :config (setq rustic-lsp-server 'rust-analyzer
                rustic-lsp-client 'lsp-mode ))
#+end_src

** Org noter

#+begin_src emacs-lisp

(use-package! org-noter
  :defer t
  :config (setq org-noter-notes-window-location 'horizontal-split
                org-noter-always-create-frame nil
                org-noter-insert-note-no-questions t
                org-noter-doc-split-fraction (0.4 . 0.4)
                org-noter-auto-save-last-location t
                org-noter-notes-search-path '("~/org/booknotes/")
                org-noter-default-heading-title "PAGE $p$"))
#+end_src

** Ivy

#+begin_src emacs-lisp
(use-package! ivy
  :defer t
  :config
  (setq ivy-height 10))
#+end_src

** Blamer

#+begin_src emacs-lisp
#+end_src

** Calibredb

#+begin_src emacs-lisp
(use-package! calibredb
  :defer t
  :config
  (setq calibredb-root-dir "~/library"
        calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)
        calibredb-library-alist '(("~/library"))
        calibredb-search-page-max-rows 50
        calibredb-virtual-library-alist '(("Economics" . "economics")
                                          ("Theory" . "theory")
                                          ("Maths" . "maths")
                                          ("Computer Science" . "cs"))
        calibredb-format-all-the-icons t
        calibredb-format-icons-in-terminal t
        calibredb-format-character-icons t))
#+end_src

** Ligatures
#+begin_src emacs-lisp
(use-package! ligature
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia and Fira Code ligatures in programming modes
  (ligature-set-ligatures '(prog-mode org-mode)
                        '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                          ;; =:= =!=
                          ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                          ;; !! !!! !. !: !!. != !== !~
                          ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                          ;; %% %%%
                          ;; ("%" (rx (+ "%")))
                          ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                          ;; |->>-||-<<-| |- |== ||=||
                          ;; |==>>==<<==<=>==//==/=!==:===>
                          ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                          "-" "=" ))))
                          ;; ++ +++ ++++ +>
                          ("+" (rx (or ">" (+ "+"))))
                          ;; :: ::: :::: :> :< := :// ::=
                          (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                          ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                          ("/" (rx (+ (or "<" "|" "/" "\\" "\*" ":" "!"
                                          "="))))
                          ;; .. ... .... .= .- .? ..= ..<
                          ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                          ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                          ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                          ;; *> */ *)  ** *** ****
                          ("*" (rx (or ">" "/" ")" (+ "*"))))
                          ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                          ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                          ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                          ;; << <<< <<<<
                          ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                          "-" "|" "="))))
                          ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                          ;; >> >>> >>>>
                          (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                          ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                          ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                       (+ "#"))))
                          ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                          ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                          ;; __ ___ ____ _|_ __|____|_
                          ;; ("_" (rx (+ (or "_" "|"))))
                          ;; The few not covered by the regexps.
                          ;; "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="
                          ))
  :hook
  (prog-mode . ligature-mode)
  (org-mode . ligature-mode))
#+end_src


* Website

#+begin_src emacs-lisp
(require 'ox-publish)
(require 'org)
(require 'org-roam-protocol)
(require 'org-roam-export)
(require 'htmlize)

(setq org-export-with-broken-links 'mark
      org-export-with-section-numbers nil
      org-publish-use-timestamps-flag t
      org-html-htmlize-output-type 'css
      org-html-html5-fancy t)

(setq org-export-global-macros
      '(("timestamp" . "@@html:<span class=\"timestamp\">$1 | </span>@@")
        ("taglist" . "@@html:< @@")))

(defun lc/org-sitemap-date-entry-format (entry style project)
  "Format ENTRY in org-publish PROJECT Sitemap format ENTRY ENTRY STYLE format that includes date."
  (let
      ((filename (org-publish-find-title entry project)))
    (if (= (length filename) 0)
        (format "*%s*" entry)
      (format
       "{{{timestamp(%s)}}} [[file:%s][%s]]"
       (format-time-string
        "%Y-%m-%d"
        (org-publish-find-date entry project))
       entry filename))))


(defun wiki/make-org-sitemap-entry (entry style project)
  "Format ENTRY"
  (let ((filename (org-publish-find-title entry project))
        (tags (org-publish-find-property entry project)))
    )
  (format
   "{{{timestamp(%s)}}} [[file:%s][%s]]"
   (format-time-string
    "%Y-%m-%d"
    (org-publish-find-date entry project))
   ))

(setq wiki/html-head  "<link rel=\"stylesheet\" href=\"../../css/style.css\" type=\"text/css\"/><link rel=\"stylesheet\" href=\"../css/style.css\" type=\"text/css\"/>")

(setq wiki/html-preamble
      "<nav class=\"hor-list flex-container-row\">
        <a href=\"/\">about</a>
        <a href=\"/notes/\"><u><b>notes</b></u></a>
        <a href=\"/writing\">writing<</a>
    </nav>")

(setq wiki/html-postamble
      "<script src=\"/js/notes.js\"></script>
<footer>
        <div class=\"copyright-container\">
        <div class=\"copyright\">
      Copyright &copy; 2023 Błażej Niewiadomski some rights reserved<br/>
        </div>
        </div>
        </footer>")

(setq writing/html-head  "<link rel=\"stylesheet\" href=\"../../css/style.css\" type=\"text/css\"/><link rel=\"stylesheet\" href=\"../css/style.css\" type=\"text/css\"/>")

(setq writing/html-preamble
      "<nav class=\"hor-list flex-container-row\">
        <a href=\"/\">about</a>
        <a href=\"/notes\">notes</a>
        <a href=\"/writing/\"><u><b>writing</b></u></a>
    </nav>")

(setq writing/html-postamble
      "<footer>
        <div class=\"copyright-container\">
        <div class=\"copyright\">
      Copyright &copy; 2023 Błażej Niewiadomski some rights reserved<br/>
        </div>
        </div>
        </footer>")



(setq wiki/project-publish-info
      `(("wiki-posts"
         :with-latex t
         :with-toc t
         :base-directory "~/org/roam/"
         :base-extension "org"
         :publishing-directory ,(substitute-in-file-name "$HOME/projects/implicit-image.github.io/notes")
         :publishing-function org-html-publish-to-html
         :html-doctype "html5"
         :html-html5-fancy t
         :html-head ,wiki/html-head
         :html-preamble ,wiki/html-preamble
         :html-postamble ,wiki/html-postamble
         :auto-sitemap t
         :sitemap-title "notes"
         :sitemap-filename "index.org"
         :sitemap-sort-folders 'ignore
         :sitemap-ignore-case t
         :sitemap-format-entry lc/org-sitemap-date-entry-format)
        ("wiki-resources"
         :base-directory "~/org/roam/resources/"
         :base-extension "css\\|txt\\|jpg\\|gif\\|png\\|pdf"
         :recursive t
         :publishing-directory  ,(substitute-in-file-name "$HOME/projects/implicit-image.github.io/notes/resources/")
         :publishing-function org-publish-attachment)
        ("personal-wiki" :components ("wiki-posts" "wiki-resources"))))

(setq writing/project-publish-info
      `(("writing-posts"
         :base-directory "~/org/writing/"
         :base-extension "org"
         :exclude-tags ("noexport" "notready")
         :with-author t
         :timestamp nil
         :with-date t
         :recursive t
         :publishing-directory ,(substitute-in-file-name "$HOME/projects/implicit-image.github.io/writing/")
         :publishing-function org-html-publish-to-html
         :html-doctype "html5"
         :html-head ,writing/html-head
         :html-preamble ,writing/html-preamble
         :html-postamble ,writing/html-postamble
         :with-latex t
         :headline-levels 1
         :makeindex t
         :auto-sitemap t
         :sitemap-title "my writing"
         :sitemap-filename "index.org"
         :sitemap-sort-files 'chronologically
         :sitemap-sort-folders 'ignore
         :sitemap-ignore-case t
         :sitemap-format-entry my/org-sitemap-date-entry-format)
        ("writing-resources"
         :base-directory ,(substitute-in-file-name "$HOME/org/writing")
         :base-extension "css\\|txt\\|jpg\\|gif\\|png\\|pdf"
         :recursive t
         :publishing-directory  ,(substitute-in-file-name "$HOME/projects/implicit-image.github.io/writing/")
         :publishing-function org-publish-attachment)
        ("writing" :components ("writing-posts" "writing-resources"))))


(setq org-publish-project-alist (append
                                 wiki/project-publish-info
                                 writing/project-publish-info))
#+end_src

* Global Keybindings

#+begin_src emacs-lisp

(map! :leader
      (:prefix ("a" . "applications")
               (:desc "Open calibredb"     "c" #'calibredb
                :desc "Counsel Web Colors" "C" #'counsel-colors-web))
      (:prefix ("t" . "toggle")
               (:desc "Visual line mode" "v" #'visual-line-mode
                :desc "Modeline"         "M" #'global-hide-mode-line-mode
                :desc "Blamer"           "B" #'blamer-mode))
      (:prefix ("e" . "execute")
               (:desc "Async shell commmand" "a" #'async-shell-command))
      (:desc "Tabify" "<tab>" #'tabify)
      (:desc "Untabify" "<backtab>" #'untabify))
#+end_src

